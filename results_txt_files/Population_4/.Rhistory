library(ggplot2)
p_values_final = read.table("Parameter_values_final.txt")
p_weights_final = read.table("Parameter_weights_final.txt")
p_values_final <- subset(p_values_final, select = -p_values_final[,1] )
p_values_final$param_weights <- unlist(p_weights_final)
colnames(p_values_final) <- c("ge", "rep","rep_r","dim","dim_r","deg","rep_dim","rep_dim_r","deg_sr", "deg_dim","weights")
library(GGally)
#ggpairs(p_values_final, diag=list(continuous="density"), axisLabels='show')
myPairs <- ggpairs(p_values_final[,1:10],
diag = list(continuous = "density",weights=p_values_final[,11]),
upper = "blank",
lower = list(continuous = "density", combo = "box",weights=p_values_final[,11]),
axisLabels = "show",
title="")
print(myPairs)
colIdx <- c(1:10)
for (i in 1:length(colIdx)) {
# Address only the diagonal elements
# Get plot out of matrix
inner <- getPlot(p, i, i);
# Add any ggplot2 settings you want
inner <- inner + theme(panel.grid = element_blank()) +
theme(axis.text.x = element_blank())
# Put it back into the matrix
p <- putPlot(p, inner, i, i)
for (j in 1:length(colIdx)){
if((i==1 & j==1)){
inner <- getPlot(p, i, j)
inner <- inner + theme(legend.position=c(length(colIdx)-0.25,0.50))
p <- putPlot(p, inner, i, j)
}
else{
inner <- getPlot(p, i, j)
inner <- inner + theme(legend.position="none")
p <- putPlot(p, inner, i, j)
}
}
}
setwd("/Volumes/cblin2/work/scanning_ABC_SMC/results_txt_files/Population_4")
